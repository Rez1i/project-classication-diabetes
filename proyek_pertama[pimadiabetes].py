# -*- coding: utf-8 -*-
"""Proyek_Pertama[PimaDiabetes].ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oRxj3r3voPE0uiSzHSpW_HKVsG2dqtoP

## Import Library
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""## Load Data"""

url = 'https://raw.githubusercontent.com/Rez1i/Machine-Learning-Terapan/refs/heads/main/diabetes.csv'
diabetes = pd.read_csv(url)

"""## Data Understanding
Deskripsi Dataset :
- Dataset ini terdiri dari 768 sampel (baris) dan 8 fitur numerik, serta 1 variabel target (Outcome).

- Semua fitur dalam dataset adalah numerik dan berkaitan dengan kesehatan individu.

- Tidak ada data kategori, sehingga tidak diperlukan encoding tambahan.
"""

diabetes

"""### Variabel-variabel pada Pima Indians Diabetes dataset adalah sebagai berikut:
- Pregnancies	: Jumlah kehamilan yang pernah dialami individu.
- Glucose	: Kadar glukosa dalam darah (mg/dL).
- BloodPressure	: Tekanan darah diastolik (mm Hg).
- SkinThickness	: Ketebalan lipatan kulit trisep (mm), sebagai indikator lemak tubuh.
- Insulin	: Kadar insulin dalam darah (mu U/ml).
- BMI	        : Indeks Massa Tubuh (Body Mass Index).
- DiabetesPedigreeFunction	:Faktor risiko diabetes berdasarkan riwayat keluarga.
- Age	        :Usia individu dalam tahun.
- Outcome	:Label target (0 = Tidak Diabetes, 1 = Diabetes).
"""

diabetes.info()

"""#### Ekplorasi Data (Exploratory Data Analysis) EDA
1. Statistik Deskriptif
  - Distribusi Nilai Fitur: Dilakukan analisis distribusi data untuk melihat apakah terdapat skewness atau outlier.
  - Rata-rata dan Median: Misalnya, rata-rata kadar glukosa pada individu yang didiagnosis diabetes lebih tinggi dibandingkan yang tidak.

"""

diabetes.describe()

"""2. Visualisasi Data
Beberapa metode visualisasi yang digunakan untuk memahami pola data:
  - Histogram & Boxplot: Digunakan untuk melihat distribusi nilai setiap fitur.

**Pregnancies**
"""

sns.boxplot(x=diabetes['Pregnancies'])

"""**Glucose**"""

sns.boxplot(x=diabetes['Glucose'])

"""**Blood Pressure**"""

sns.boxplot(x=diabetes['BloodPressure'])

"""**SkinThickness**"""

sns.boxplot(x=diabetes['SkinThickness'])

"""**Insulin**"""

sns.boxplot(x=diabetes['Insulin'])

"""**BMI(Body Mass Index)**"""

sns.boxplot(x=diabetes['BMI'])

"""**DiabetesPedigreeFunction**"""

sns.boxplot(x=diabetes['DiabetesPedigreeFunction'])

"""**Age**"""

sns.boxplot(x=diabetes['Age'])

"""  - Heatmap Korelasi: Untuk menganalisis hubungan antar variabel."""

plt.figure(figsize=(10, 8))
correlation_matrix = diabetes.corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""  - Pairplot (Seaborn): Untuk melihat distribusi dan pola hubungan antar fitur."""

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(diabetes, diag_kind = 'kde')

"""3. Identifikasi Missing Values

- Beberapa nilai dalam fitur seperti Glucose, BloodPressure, SkinThickness, Insulin, dan BMI memiliki nilai 0, yang secara medis tidak mungkin terjadi.
"""

# Mencari jumlah nilai 0 pada setiap fitur
null_counts = diabetes.isin([0]).sum()

print("Jumlah nilai 0 pada setiap fitur:")
null_counts

"""- Solusi yang dilakukan adalah mengganti nilai nol dengan median atau menggunakan metode imputasi."""

diabetes.describe()

"""## Data Preparation
Sebelum melatih model klasifikasi, dilakukan data preparation untuk memastikan kualitas data optimal. Proses ini mencakup penanganan missing values, normalisasi, penanganan outlier, dan penyeimbangan data.

### Menangani Missing Values
"""

# Mengganti nilai 0 dengan median pada fitur yang relevan
columns_to_replace = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
for column in columns_to_replace:
    diabetes[column] = diabetes[column].replace(0, diabetes[column].median())

print("\nJumlah nilai 0 pada setiap fitur setelah penggantian:")
print(diabetes.isin([0]).sum())

"""> Mengganti nilai 0 dengan median karena Median lebih tahan terhadap outlier dibandingkan mean dan Menghindari bias akibat distribusi yang skewed

### Menangani Outlier
"""

from scipy.stats.mstats import winsorize

for col in ['Insulin', 'SkinThickness']:
    diabetes[col] = winsorize(diabetes[col], limits=[0.05, 0.05])  # Menangani 5% data ekstrem

print("\nSetelah menangani outlier:")
print(diabetes[['Insulin', 'SkinThickness']].describe())

# Visualisasi boxplot setelah menangani outlier
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
sns.boxplot(y=diabetes['Insulin'])
plt.title("Boxplot Insulin (Setelah)")

plt.subplot(1, 2, 2)
sns.boxplot(y=diabetes['SkinThickness'])
plt.title("Boxplot SkinThickness (Setelah)")
plt.show()

"""> Menangani outlier karena outlier dapat menyebabkan model overfitting atau hasil yang tidak akurat dan menggunakan Winsorization agar distribusi tetap stabil tanpa menghapus data.

### Normalisasi Data (Feature Scaling)
"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
diabetes_scaled = diabetes.copy()
diabetes_scaled.iloc[:, :-1] = scaler.fit_transform(diabetes_scaled.iloc[:, :-1])  # Semua fitur kecuali target

# Menampilkan hasil setelah normalisasi
print("Data setelah normalisasi:")
print(diabetes_scaled.head())

# Statistik ringkasan setelah normalisasi
print("\nStatistik setelah normalisasi:")
print(diabetes_scaled.describe())

"""> Menggunakan Min-Max Scaling untuk memastikan semua fitur dalam rentang 0-1, memudahkan model berbasis Gradient Descent dan mencegah fitur dengan nilai besar mendominasi model.

### Menangani Ketidakseimbangan Kelas
"""

from imblearn.over_sampling import SMOTE

X = diabetes_scaled.iloc[:, :-1]
y = diabetes_scaled.iloc[:, -1]

smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Menggabungkan kembali ke dalam DataFrame
diabetes_resampled = pd.DataFrame(X_resampled, columns=X.columns)
diabetes_resampled["Outcome"] = y_resampled

# Menampilkan distribusi kelas setelah SMOTE
print("Distribusi kelas setelah SMOTE:")
print(diabetes_resampled["Outcome"].value_counts())

"""> Menggunakan SMOTE karena model cenderung bias ke kelas mayoritas jika dataset tidak seimbang dan SMOTE membuat sampel sintetis untuk kelas minoritas tanpa kehilangan data asli.

### Split Data (Train-Test Split)
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42, stratify=y_resampled)

# Menampilkan hasil split
print("Jumlah data setelah Train-Test Split:")
print(f"Training set: {X_train.shape[0]} sampel")
print(f"Test set: {X_test.shape[0]} sampel")

"""> Menggunakan stratify untuk memastikan proporsi kelas tetap seimbang antara training dan testing set.

## Modeling
"""

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Model Logistic Regression
logreg = LogisticRegression(random_state=42)
logreg.fit(X_train, y_train)
y_pred_logreg = logreg.predict(X_test)

# Model Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

"""**Penjelasan Kode**  
Menggunakan dua model klasifikasi:
- Logistic Regression → Model sederhana & interpretable.
- Random Forest → Model kompleks dengan hasil lebih akurat.
- Melatih kedua model menggunakan X_train, y_train.
- Melakukan prediksi pada X_test.

## Evaluation
"""

# Evaluasi Model
print("Logistic Regression Performance:")
print(classification_report(y_test, y_pred_logreg))
print("Accuracy:", accuracy_score(y_test, y_pred_logreg))

print("\nRandom Forest Performance:")
print(classification_report(y_test, y_pred_rf))
print("Accuracy:", accuracy_score(y_test, y_pred_rf))

"""Metrik evaluasi yang digunakan :
1. Accuracy
- Kelebihan: Memberikan gambaran umum tentang seberapa sering model benar.
- Kekurangan: Tidak cukup representatif jika data tidak seimbang.
- Relevansi: Dataset Pima Indians memang sedikit tidak seimbang (jumlah penderita diabetes < non-diabetes), jadi akurasi perlu dilengkapi dengan metrik lain seperti recall dan F1.

2. Precision
- Kelebihan: Cocok untuk mengevaluasi seberapa "pasti" model saat menyatakan seseorang menderita diabetes.
- Relevansi: Dalam konteks medis, false positive (mendiagnosis seseorang sebagai penderita padahal tidak) bisa membuat pasien khawatir atau menjalani pemeriksaan tak perlu. Maka, precision penting tapi bukan yang utama.

3. Recall
- Kelebihan: Memastikan bahwa kasus diabetes tidak luput dari deteksi.

- Relevansi: Sangat penting. Dalam konteks kesehatan, false negative sangat berbahaya—pasien yang tidak didiagnosis bisa luput dari penanganan dini. Recall tinggi artinya model lebih sensitif terhadap kasus positif.

4. F1-score
- Kelebihan: Metrik gabungan yang menyeimbangkan precision dan recall.

- Relevansi: Sangat berguna karena mempertimbangkan trade-off antara prediksi positif yang benar dan kegagalan mendeteksi kasus penting. Cocok untuk dataset tidak seimbang.

**Hasil Evaluasi dan Komparasi Model**
Hasil evaluasi kuantitatif :
1. Logistic Regression
- Accuracy  : 0.73
- Precision : 0.73
- Recall    : 0.74
- F1-score  : 0.73
  
2. Random Forest
- Accuracy  : 0.80
- Precision : 0.80
- Recall    : 0.80
- F1-score  : 0.80


**Model Terbaik**  
Berdasarkan metrik evaluasi:

- Random Forest Classifier lebih unggul daripada Logistic Regression.

- Meskipun belum dituning, model ini sudah memberikan recall dan F1-score lebih tinggi, yang sangat penting untuk kasus klasifikasi kesehatan.

**Hubungan dengan Business Understanding**  
1. Bagaimana membangun model klasifikasi machine learning untuk memprediksi risiko diabetes pada perempuan dewasa komunitas Pima Indian berdasarkan data kesehatan mereka?

Tercapai :

- Model klasifikasi berbasis Random Forest dan Logistic Regression telah berhasil dibangun dan diuji.

- Model mampu melakukan prediksi secara cukup akurat dengan metrik yang kuat: F1-score 0.80, Recall 0.80, dan Precision 0.80 menggunakan Random Forest.

- Hal ini membuktikan bahwa model dapat digunakan sebagai alat bantu prediksi awal risiko diabetes pada kelompok sasaran.

2. Fitur-fitur kesehatan apa saja yang paling berpengaruh dalam menentukan apakah seseorang berisiko menderita diabetes atau tidak?  

Tercapai :  

- Dari model Random Forest, kita bisa memperoleh informasi tentang feature importance.

- Fitur yang paling berpengaruh (berdasarkan evaluasi model) meliputi Glucose, BMI (Body Mass Index), Age, dan Insulin

- Pengetahuan ini sangat penting bagi pihak medis dan komunitas kesehatan untuk fokus pada variabel-variabel yang paling relevan dalam pencegahan dan deteksi dini.

3. Bagaimana performa model klasifikasi yang dibangun dalam hal akurasi, presisi, recall, dan F1-score pada dataset Pima Indians Diabetes?

Tercapai

- Evaluasi menunjukkan bahwa model Random Forest tanpa tuning memberikan hasil performa terbaik dibandingkan Logistic Regression. Accuracy: 80%, Precision: 80%, Recall: 80%, F1-score: 80%

- Dengan nilai yang seimbang di semua metrik, model tidak hanya akurat tetapi juga cukup andal dalam menangani risiko false negative, yang krusial dalam konteks kesehatan.

**Dampak Solusi terhadap Bisnis**  
  
Solusi yang dibangun dalam bentuk model klasifikasi:

- Berguna secara praktis untuk membantu tenaga kesehatan atau pengambil kebijakan dalam melakukan skrining awal berbasis data.

- Memberikan insight prediktif terhadap siapa yang memiliki risiko tinggi menderita diabetes.

- Dapat diintegrasikan ke dalam sistem kesehatan komunitas untuk membantu proses intervensi dini, pengelolaan program edukasi, dan distribusi sumber daya.
"""